services:
  api-application:
    restart: unless-stopped
    #build:
    #  context: api-application
    #  dockerfile: Dockerfile
    image: ghcr.io/pi-coffeebreak/core:latest
    env_file:
      - .env
    environment:
      - KEYCLOAK_REALM=coffeebreak
      - KEYCLOAK_CLIENT_ID=fastapi-client
      - RABBITMQ_HOST=mq
    depends_on:
      database:
        condition: service_healthy
      keycloak:
        condition: service_started
      mongodb:
        condition: service_healthy
    volumes:
      - ./plugins:/app/plugins
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 3s
    profiles:
      - prod

  event-app:
    restart: unless-stopped
    image: ghcr.io/pi-coffeebreak/event-app:latest
    profiles:
      - prod
    environment:
      - KEYCLOAK_REALM=coffeebreak
      - KEYCLOAK_CLIENT_ID=coffeebreak-client
    env_file:
      - .env
    
  frontend:
    restart: unless-stopped
    image: ghcr.io/pi-coffeebreak/admin-frontend:latest
    env_file:
      - .env
    environment:
      - KEYCLOAK_REALM=coffeebreak
      - KEYCLOAK_CLIENT_ID=coffeebreak-client
    profiles:
      - prod

  database:
    restart: unless-stopped
    image: postgres:17.4-alpine3.21
    environment:
      POSTGRES_DB: coffeebreak
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d coffeebreak"]
      interval: 10s
      timeout: 20s
      retries: 6
      start_period: 3s

  pgadmin:
    restart: unless-stopped
    image: dpage/pgadmin4
    ports:
      - 15433:80
    environment:
      PGADMIN_LISTEN_PORT: 80
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin/
    profiles:
      - debug

  mongodb:
    restart: unless-stopped
    image: mongo:8.0.5
    env_file:
      - .env
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"]
      interval: 10s
      timeout: 10s
      retries: 8
      start_period: 5s

  keycloak:
    restart: unless-stopped
    build:
      context: keycloak
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_LOGLEVEL: DEBUG
    env_file:
      - .env
    depends_on:
      keycloak-db:
        condition: service_healthy
    volumes:
      - ./keycloak/providers:/opt/keycloak/providers:ro
      - ./keycloak/themes:/opt/keycloak/themes:ro
      - ./keycloak/exports:/opt/keycloak/data/import:ro

  keycloak-db:
    restart: unless-stopped
    image: postgres:17.4-alpine3.21
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${KC_DB_USERNAME}
      POSTGRES_PASSWORD: ${KC_DB_PASSWORD}
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KC_DB_USERNAME} -d keycloak"]
      interval: 5s
      timeout: 60s
      retries: 8
      start_period: 5s

  mq:
    restart: unless-stopped
    image: rabbitmq:4.0.8-management-alpine
    container_name: mq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  nginx:
    restart: unless-stopped
    image: nginx:1.27.4-alpine3.21-perl
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt/live/coffeebreak.sebastiaoteixeira.me/fullchain.pem:/etc/nginx/certs/fullchain.pem:ro
      - /etc/letsencrypt/live/coffeebreak.sebastiaoteixeira.me/privkey.pem:/etc/nginx/certs/privkey.pem:ro
    depends_on:
      keycloak:
        condition: service_started
      api-application:
        condition: service_started
      event-app:
        condition: service_started
    profiles:
      - prod

  webpush-sender:
    restart: unless-stopped
    build:
      context: webpush-sender
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      mq:
        condition: service_started
      database:
        condition: service_healthy

volumes:
  postgres_data:
  pgadmin_data:
  mongodb_data:
  keycloak_data:
  rabbitmq_data:
